From 204c672eb33576774aabc483b57ad9b70a7ba7b1 Mon Sep 17 00:00:00 2001
From: Nils Philippsen <nils@redhat.com>
Date: Mon, 29 Oct 2012 10:54:06 +0100
Subject: [PATCH] patch: CVE-2012-4433

Squashed commit of the following:

commit 333abf8b345414773abcbca90b8d00ef9fa295d2
Author: Nils Philippsen <nils@redhat.com>
Date:   Tue Oct 16 16:57:37 2012 +0200

    ppm-load: bring comment in line with reality

commit a6f6e215129b9883724ebc7bddb6946cff4bcc7e
Author: Nils Philippsen <nils@redhat.com>
Date:   Tue Oct 16 16:56:40 2012 +0200

    ppm-load: CVE-2012-4433: add plausibility checks for header fields

    Refuse values that are non-decimal, negative or overflow the target
    type.

commit fb11b31cbda53f846e24cddfaf040957623be449
Author: Nils Philippsen <nils@redhat.com>
Date:   Tue Oct 16 16:58:27 2012 +0200

    ppm-load: CVE-2012-4433: don't overflow memory allocation

    Carefully selected width/height values could cause the size of a later
    allocation to overflow, resulting in a buffer much too small to store
    the data which would then written beyond its end.

commit 2aac8062219867b7326f216f10a20ec13248150f
Author: Nils Philippsen <nils@redhat.com>
Date:   Fri Oct 26 17:39:07 2012 +0200

    ignore some return values

    was:

    Add arguments to prepare GEGL for being aware of scaling down previews.

    Ignoring this argument should be valid, since it is added as the last argument
    to all functions where it might be used this is actually not an ABI change.
    (cherry picked from commit d11473ecc636f6f8c754d84f3ab934e9aa3b28df)

    Conflicts:
    	gegl/buffer/gegl-buffer-access.c
    	gegl/buffer/gegl-buffer-cl-cache.c
    	gegl/buffer/gegl-buffer-cl-iterator.c
    	gegl/buffer/gegl-buffer-iterator.c
    	gegl/buffer/gegl-buffer-linear.c
    	gegl/buffer/gegl-sampler.c
    	gegl/operation/gegl-operation-composer.h
    	gegl/operation/gegl-operation-composer3.h
    	gegl/operation/gegl-operation-filter.c
    	gegl/operation/gegl-operation-filter.h
    	gegl/operation/gegl-operation-point-composer.c
    	gegl/operation/gegl-operation-point-composer.h
    	gegl/operation/gegl-operation-point-composer3.h
    	gegl/operation/gegl-operation-point-filter.c
    	gegl/operation/gegl-operation-point-filter.h
    	gegl/operation/gegl-operation-point-render.c
    	gegl/operation/gegl-operation-point-render.h
    	gegl/operation/gegl-operation-sink.c
    	gegl/operation/gegl-operation-sink.h
    	gegl/operation/gegl-operation-source.c
    	gegl/operation/gegl-operation-source.h
    	gegl/operation/gegl-operation-temporal.h
    	gegl/process/gegl-eval-visitor.c
    	operations/affine/affine.c
    	operations/common/brightness-contrast.c
    	operations/common/color-temperature.c
    	operations/common/display.c
    	operations/common/edge-laplace.c
    	operations/common/edge-sobel.c
    	operations/common/exp-combine.c
    	operations/common/fattal02.c
    	operations/common/gegl-buffer-load-op.c
    	operations/common/gegl-buffer-save-op.c
    	operations/common/grid.c
    	operations/common/invert.c
    	operations/common/mantiuk06.c
    	operations/common/map-absolute.c
    	operations/common/map-relative.c
    	operations/common/matting-global.c
    	operations/common/motion-blur.c
    	operations/common/noise-reduction.c
    	operations/common/opacity.c
    	operations/common/over.c
    	operations/common/pixelise.c
    	operations/common/reinhard05.c
    	operations/common/remap.c
    	operations/common/save.c
    	operations/common/threshold.c
    	operations/common/value-invert.c
    	operations/common/vignette.c
    	operations/common/whitebalance.c
    	operations/core/nop.c
    	operations/external/display.c
    	operations/external/exr-save.cc
    	operations/external/jp2-load.c
    	operations/external/jpg-load.c
    	operations/external/jpg-save.c
    	operations/external/matting-levin.c
    	operations/external/openraw.c
    	operations/external/png-save.c
    	operations/external/ppm-save.c
    	operations/external/rgbe-load.c
    	operations/external/rgbe-save.c
    	operations/external/vector-fill.c
    	operations/external/vector-stroke.c
    	operations/generated/add.c
    	operations/generated/clear.c
    	operations/generated/color-burn.c
    	operations/generated/color-dodge.c
    	operations/generated/darken.c
    	operations/generated/difference.c
    	operations/generated/divide.c
    	operations/generated/dst-atop.c
    	operations/generated/dst-in.c
    	operations/generated/dst-out.c
    	operations/generated/dst-over.c
    	operations/generated/dst.c
    	operations/generated/exclusion.c
    	operations/generated/gamma.c
    	operations/generated/hard-light.c
    	operations/generated/lighten.c
    	operations/generated/multiply.c
    	operations/generated/overlay.c
    	operations/generated/plus.c
    	operations/generated/screen.c
    	operations/generated/soft-light.c
    	operations/generated/src-atop.c
    	operations/generated/src-in.c
    	operations/generated/src-out.c
    	operations/generated/src-over.c
    	operations/generated/src.c
    	operations/generated/subtract.c
    	operations/generated/xor.c
    	operations/workshop/box-max.c
    	operations/workshop/box-min.c
    	operations/workshop/demosaic-bimedian.c
    	operations/workshop/demosaic-simple.c
    	operations/workshop/lens-correct.c
    	operations/workshop/max-rgb.c
    	operations/workshop/noise-spread.c
    	operations/workshop/whirl-pinch.c

commit b35a1531604340dac0c29b107f0af46335020508
Author: Mukund Sivaraman <muks@banu.com>
Date:   Wed Jul 28 13:57:02 2010 +0530

    ppm-load: Fix compare between signed and unsigned
    (cherry picked from commit 3ffb2ff9f81fcf5673b1a478793ea67ff2d4ba0f)

commit fe7e44d96ae8bf0489d8ddd323498468f0062d0b
Author: Mukund Sivaraman <muks@banu.com>
Date:   Thu Jun 24 23:04:59 2010 +0530

    ppm-load: Fix leak of file handles when input is not a PPM file
    (cherry picked from commit 0ba03e293600fef491e0225dd035e9b0ff9aab20)

commit 1245a9dc1c295c1ca7d41eb5ef699ee2763201aa
Author: Mukund Sivaraman <muks@banu.com>
Date:   Tue Jun 22 23:40:31 2010 +0530

    ppm-load: Don't initialize image data to zero
    (cherry picked from commit ec06cc8b0e7f9dff17a643cd8f0495f2546ad849)

commit 6a1d13805632a3db5cd49044ebd07b9f2395b7c8
Author: Mukund Sivaraman <muks@banu.com>
Date:   Tue Jun 22 20:13:24 2010 +0530

    ppm-load: Fix format strings
    (cherry picked from commit 9b64a2e0b96b19ef59faf1ee90b2986c35435a76)

commit 2eba91a370b0992eb6503bbded9c91fb657cf33d
Author: Mukund Sivaraman <muks@banu.com>
Date:   Tue Jun 22 18:49:46 2010 +0530

    ppm-load: Make bpc into a gsize
    (cherry picked from commit 895c8c21c361869023a9185a5cefd1e0c5b85da9)

commit 95d3c1b71eabc6b08fc525861f08c13971c47371
Author: Mukund Sivaraman <muks@banu.com>
Date:   Tue Jun 22 17:52:01 2010 +0530

    ppm-load: Restructure code to do fewer computations
    (cherry picked from commit 7c966b5808daca1c5a4214baebff78b84ef713b1)

commit 4afea1e428abfb7dd0b48698cf773f362ff80c59
Author: Mukund Sivaraman <muks@banu.com>
Date:   Tue Jun 22 17:51:44 2010 +0530

    ppm-load: Add support for 16-bit images
    (cherry picked from commit 0c3053e87cefb0e22d1209a2073e8212a1fdfff0)

commit fce43b73e01dd51d5abcd7e26421b2a8f5e1f250
Author: Mukund Sivaraman <muks@banu.com>
Date:   Tue Jun 22 17:51:26 2010 +0530

    ppm-load: Return early if there's an error loading the header
    (cherry picked from commit cae2edbb465daa2f974d3114309e4fc0c2aaa8e4)

commit c449a2c5e0075ade9fcf0206ae89cde7a972fdab
Author: Mukund Sivaraman <muks@banu.com>
Date:   Tue Jun 22 17:51:11 2010 +0530

    ppm-load: Remove unnecessary protos
    (cherry picked from commit 2e00d9da6d04846e8a994a49f67cb198a51b16e3)

commit 9a0a0c413889a5996345315d6d2d07328aaa5e07
Author: Mukund Sivaraman <muks@banu.com>
Date:   Tue Jun 22 17:50:56 2010 +0530

    ppm-load: Make some functions static
    (cherry picked from commit e85a2c3d20dd620f2649583c870211547a4a8e4d)

commit e06332f8db731cc76920388389da9c525c4d9592
Author: Mukund Sivaraman <muks@banu.com>
Date:   Tue Jun 22 17:50:39 2010 +0530

    ppm-load: Remove unnecessary whitespace
    (cherry picked from commit 9fb7970f358bd4e3030aa00ae6158db3f44be361)
---
 operations/external/ppm-load.c | 267 +++++++++++++++++++++++++++++++----------
 1 file changed, 201 insertions(+), 66 deletions(-)

diff --git a/operations/external/ppm-load.c b/operations/external/ppm-load.c
index 045f387..5222564 100644
--- a/operations/external/ppm-load.c
+++ b/operations/external/ppm-load.c
@@ -28,14 +28,15 @@ gegl_chant_file_path (path, _("File"), "", _("Path of file to load."))
 
 #define GEGL_CHANT_TYPE_SOURCE
 #define GEGL_CHANT_C_FILE       "ppm-load.c"
-        
+
 #define MAX_CHARS_IN_ROW        500
 #define CHANNEL_COUNT           3
 #define ASCII_P                 80
-        
+
 #include "gegl-chant.h"
 #include <stdio.h>
 #include <stdlib.h>
+#include <errno.h>
 
 typedef enum {
   PIXMAP_ASCII  = 51,
@@ -44,80 +45,159 @@ typedef enum {
 
 typedef struct {
 	map_type   type;
-	gint       width;
-	gint       height;
-        gint       size;
-	gint       maxval;
+	glong      width;
+	glong      height;
+        gsize      numsamples; /* width * height * channels */
+        gsize      bpc;        /* bytes per channel */
 	guchar    *data;
 } pnm_struct;
 
-void
-ppm_load_read_header(FILE       *fp,
-                     pnm_struct *img);
-void
-ppm_load_read_image(FILE       *fp,
-                    pnm_struct *img);
-
-void
+static gboolean
 ppm_load_read_header(FILE       *fp,
                      pnm_struct *img)
-  {
+{
     /* PPM Headers Variable Declaration */
     gchar *ptr;
-    gchar *retval;
+    //gchar *retval;
     gchar  header[MAX_CHARS_IN_ROW];
+    gint   maxval;
 
-    /* Check the PPM file Type P2 or P5 */
-    retval = fgets (header,MAX_CHARS_IN_ROW,fp);
+    /* Check the PPM file Type P3 or P6 */
+    fgets (header,MAX_CHARS_IN_ROW,fp);
 
     if (header[0] != ASCII_P ||
-        (header[1] != PIXMAP_ASCII && 
-         header[1] != PIXMAP_RAW
-        )
-       )
-      printf ("Image is not a portable pixmap\n");
+        (header[1] != PIXMAP_ASCII &&
+         header[1] != PIXMAP_RAW))
+      {
+        g_warning ("Image is not a portable pixmap");
+        return FALSE;
+      }
 
     img->type = header[1];
 
     /* Check the Comments */
-    retval = fgets (header,MAX_CHARS_IN_ROW,fp);
+    fgets (header,MAX_CHARS_IN_ROW,fp);
     while(header[0] == '#')
       {
-        retval = fgets (header,MAX_CHARS_IN_ROW,fp);
+        fgets (header,MAX_CHARS_IN_ROW,fp);
       }
 
     /* Get Width and Height */
-    img->width  = strtol (header,&ptr,0);
-    img->height = atoi (ptr);
+    errno = 0;
+    img->width  = strtol (header,&ptr,10);
+    if (errno)
+      {
+        g_warning ("Error reading width: %s", strerror(errno));
+        return FALSE;
+      }
+    else if (img->width < 0)
+      {
+        g_warning ("Error: width is negative");
+        return FALSE;
+      }
+
+    img->height = strtol (ptr,&ptr,10);
+    if (errno)
+      {
+        g_warning ("Error reading height: %s", strerror(errno));
+        return FALSE;
+      }
+    else if (img->width < 0)
+      {
+        g_warning ("Error: height is negative");
+        return FALSE;
+      }
+
+    fgets (header,MAX_CHARS_IN_ROW,fp);
+    maxval = strtol (header,&ptr,10);
+
+    if ((maxval != 255) && (maxval != 65535))
+      {
+        g_warning ("Image is not an 8-bit or 16-bit portable pixmap");
+        return FALSE;
+      }
+
+  switch (maxval)
+    {
+    case 255:
+      img->bpc = sizeof (guchar);
+      break;
 
-    img->size = img->width * img->height * sizeof (guchar) * CHANNEL_COUNT;
+    case 65535:
+      img->bpc = sizeof (gushort);
+      break;
 
-    retval = fgets (header,100,fp);
-    /* Maxval is not used */
-    img->maxval = (int) strtol (header,&ptr,0);
-  }
+    default:
+      g_warning ("%s: Programmer stupidity error", G_STRLOC);
+    }
+
+    /* Later on, img->numsamples is multiplied with img->bpc to allocate
+     * memory. Ensure it doesn't overflow. */
+    if (!img->width || !img->height ||
+        G_MAXSIZE / img->width / img->height / CHANNEL_COUNT < img->bpc)
+      {
+        g_warning ("Illegal width/height: %ld/%ld", img->width, img->height);
+        return FALSE;
+      }
+    img->numsamples = img->width * img->height * CHANNEL_COUNT;
 
-void
+    return TRUE;
+}
+
+static void
 ppm_load_read_image(FILE       *fp,
                     pnm_struct *img)
- {
-    gint    i;
-    gint    retval;
-    guchar *ptr;
+{
+    guint   i;
 
     if (img->type == PIXMAP_RAW)
       {
-        /* Pixel Extraction */
-        retval = fread (img->data, 1, img->size, fp);
+        fread (img->data, img->bpc, img->numsamples, fp);
+
+        /* Fix endianness if necessary */
+        if (img->bpc > 1)
+          {
+            gushort *ptr = (gushort *) img->data;
+
+            for (i=0; i < img->numsamples; i++)
+              {
+                *ptr = GUINT16_FROM_BE (*ptr);
+                ptr++;
+              }
+          }
       }
     else
       {
-        ptr = img->data;
-
-        for (i=0; i<img->size; i++)
-          retval = fscanf (fp, " %d", (int *) ptr++);
+        /* Plain PPM format */
+
+        if (img->bpc == sizeof (guchar))
+          {
+            guchar *ptr = img->data;
+
+            for (i = 0; i < img->numsamples; i++)
+              {
+                guint sample;
+                fscanf (fp, " %u", &sample);
+                *ptr++ = sample;
+              }
+          }
+        else if (img->bpc == sizeof (gushort))
+          {
+            gushort *ptr = (gushort *) img->data;
+
+            for (i = 0; i < img->numsamples; i++)
+              {
+                guint sample;
+                fscanf (fp, " %u", &sample);
+                *ptr++ = sample;
+              }
+          }
+        else
+          {
+            g_warning ("%s: Programmer stupidity error", G_STRLOC);
+          }
       }
-  }
+}
 
 static GeglRectangle
 get_bounding_box (GeglOperation *operation)
@@ -130,20 +210,33 @@ get_bounding_box (GeglOperation *operation)
   fp = (!strcmp (o->path, "-") ? stdin : fopen (o->path,"rb") );
 
   if (!fp)
-    {
-      return result;
-    }
-  ppm_load_read_header (fp, &img);
+    return result;
 
-  if (stdin != fp)
+  if (!ppm_load_read_header (fp, &img))
+    goto out;
+
+  switch (img.bpc)
     {
-      fclose (fp);
+    case 1:
+      gegl_operation_set_format (operation, "output",
+                                 babl_format ("R'G'B' u8"));
+      break;
+
+    case 2:
+      gegl_operation_set_format (operation, "output",
+                                 babl_format ("R'G'B' u16"));
+      break;
+
+    default:
+      g_warning ("%s: Programmer stupidity error", G_STRLOC);
     }
 
-  gegl_operation_set_format (operation, "output", babl_format ("R'G'B' u8"));
+  result.width = img.width;
+  result.height = img.height;
 
-  result.width  = img.width;
-  result.height  = img.height;
+ out:
+  if (stdin != fp)
+    fclose (fp);
 
   return result;
 }
@@ -157,35 +250,77 @@ process (GeglOperation       *operation,
   FILE         *fp;
   pnm_struct    img;
   GeglRectangle rect = {0,0,0,0};
+  gboolean      ret = FALSE;
 
   fp = (!strcmp (o->path, "-") ? stdin : fopen (o->path,"rb"));
 
   if (!fp)
+    return FALSE;
+
+  if (!ppm_load_read_header (fp, &img))
+    goto out;
+
+  /* Allocating Array Size */
+
+  /* Should use g_try_malloc(), but this causes crashes elsewhere because the
+   * error signalled by returning FALSE isn't properly acted upon. Therefore
+   * g_malloc() is used here which aborts if the requested memory size can't be
+   * allocated causing a controlled crash. */
+  img.data = (guchar*) g_malloc (img.numsamples * img.bpc);
+
+  /* No-op without g_try_malloc(), see above. */
+  if (! img.data)
     {
-      return FALSE;
+      g_warning ("Couldn't allocate %" G_GSIZE_FORMAT " bytes, giving up.", ((gsize)img.numsamples * img.bpc));
+      goto out;
     }
 
-  ppm_load_read_header (fp, &img);
   rect.height = img.height;
   rect.width = img.width;
 
-  /* Allocating Array Size */
-  img.data = (guchar*) g_malloc0 (img.size);
-
-  gegl_buffer_get (output, 1.0, &rect, babl_format ("R'G'B' u8"), img.data,
-          GEGL_AUTO_ROWSTRIDE);
+  switch (img.bpc)
+    {
+    case 1:
+      gegl_buffer_get (output, 1.0, &rect, babl_format ("R'G'B' u8"), img.data,
+                       GEGL_AUTO_ROWSTRIDE);
+      break;
+
+    case 2:
+      gegl_buffer_get (output, 1.0, &rect, babl_format ("R'G'B' u16"), img.data,
+                       GEGL_AUTO_ROWSTRIDE);
+      break;
+
+    default:
+      g_warning ("%s: Programmer stupidity error", G_STRLOC);
+    }
 
   ppm_load_read_image (fp, &img);
 
-  gegl_buffer_set (output, &rect, babl_format ("R'G'B' u8"), img.data,
-          GEGL_AUTO_ROWSTRIDE);
+  switch (img.bpc)
+    {
+    case 1:
+      gegl_buffer_set (output, &rect, babl_format ("R'G'B' u8"), img.data,
+                       GEGL_AUTO_ROWSTRIDE);
+      break;
+
+    case 2:
+      gegl_buffer_set (output, &rect, babl_format ("R'G'B' u16"), img.data,
+                       GEGL_AUTO_ROWSTRIDE);
+      break;
+
+    default:
+      g_warning ("%s: Programmer stupidity error", G_STRLOC);
+    }
 
   g_free (img.data);
+
+  ret = TRUE;
+
+ out:
   if (stdin != fp)
-    {
-      fclose (fp);
-    }
-  return  TRUE;
+    fclose (fp);
+
+  return ret;
 }
 
 static GeglRectangle
-- 
1.7.11.7

